.TH LIVE\-BUILD 7 2015\-10\-21 5.0~a11-1 "Live Systems Project"

.SH NAME
\fBlive\-build\fR \- the live systems tool suite

.SH SYNOPSIS
.\" FIXME
\fBlb \fR\fICOMMAND\fR [\fB\-h|\-\-help\fR] [\fB\-u|\-\-usage\fR] [\fB\-v|\-\-version\fR] [\fB\-\-breakpoints\fR] [\fB\-\-conffile\fR] [\fB\-\-debug\fR] [\fB\-\-force\fR] [\fB\-\-quiet\fR] [\fB\-\-verbose\fR]
.\" FIXME

.SH DESCRIPTION
.\" FIXME
live\-build is a set of scripts to build live system images. The idea behind live\-build is a tool suite that uses a configuration directory to completely automate and customize all aspects of building a Live image.
.PP
The \fICOMMAND\fR is a name of a live\-build command (see below).
.PP
More documentation about how to use live\-build is available in the individual manpages for each helper and in the manual at <\fIhttp://live-systems.org/manual/\fR>.
.\" FIXME

.SH OPTIONS
.\" FIXME
.SS Shared live\-build options
The following command line options are supported by all live\-build programs.
.IP "\fB-h, \-\-help\fR" 4
display help and exit.
.IP "\fB-u, \-\-usage\fR" 4
show usage and exit.
.IP "\fB-v, \-\-version\fR" 4
output version information and exit.
.SS Common live\-build options
The following command line options are supported by most live\-build programs. See the man page of each program for a complete explanation of what each option does.
.IP "\fB\-\-breakpoints\fR" 4
run with breakpoints.
.IP "\fB\-\-conffile\fR" 4
use custom configuration file.
.IP "\fB\-\-debug\fR" 4
show debug information.
.IP "\fB\-\-force\fR" 4
force helper execution, even if stage file exists.
.IP "\fB\-\-quiet\fR" 4
be quiet.
.IP "\fB\-\-verbose\fR" 4
be verbose.
.\" FIXME

.SH LIVE\-BUILD COMMANDS
.\" FIXME
We divide live\-build into high level ("porcelain") commands and low level ("plumbing") commands.
.PP
Here is the complete list of all available live\-build commands. See their man
pages for additional documentation.
.\" FIXME

.SH HIGH\-LEVEL COMMANDS (PORCELAIN)
.\" FIXME
We separate the porcelain commands into the main commands and some ancillary user utilities.
.SS Main porcelain commands
.IP "\fBlb_config\fR(1)" 4
create configuration for live\-build
.IP "\fBlb_bootstrap\fR(1)" 4
create the first stage by bootstrapping a basic debian system
.IP "\fBlb_chroot\fR(1)" 4
create the second stage by customizing the chroot
.IP "\fBlb_binary\fR(1)" 4
create the third stage by generating a binary image
.IP "\fBlb_source\fR(1)" 4
create the optional fourth stage by generating a source image
.IP "\fBlb_clean\fR(1)" 4
clean up system build directories
.SS Ancillary Commands
.IP "\fBlb\fR(1)" 4
generic live\-build wrapper
.IP "\fBlb_build\fR(1)" 4
alias for all stages
.IP "\fBlb_local\fR(1)" 4
helper for using a local live\-build
.IP "\fBlb_testroot\fR(1)" 4
ensure that a system is built as root
.\" FIXME

.SH LOW\-LEVEL COMMANDS (PLUMBING)
.\" FIXME
The actual work of live\-build is implemented in the low-level commands, called plumbing. They are not supposed to be used by end users, they should stick with porcelains as they ensure that all the different plumbing commands are executed in the right order. However, if you intend to reuse live\-build commands in your own scripts, then the plumbings might be of interest for you.
.PP
Note that the interface (set of options and the semantics) to these low\-level commands are meant to be a lot more stable than Porcelain level commands. The interface to Porcelain commands on the other hand are subject to change in order to improve the end user experience.
.SS Bootstrap commands
.IP "\fBlb_bootstrap_cache\fR(1)" 4
cache bootstrap stage
.IP "\fBlb_bootstrap_debootstrap\fR(1)" 4
bootstrap a Debian system with debootstrap(8)
.SS Chroot commands
.IP "\fBlb_chroot_apt\fR(1)" 4
manage /etc/apt/apt.conf
.IP "\fBlb_chroot_cache\fR(1)" 4
cache chroot stage
.IP "\fBlb_chroot_debianchroot\fR(1)" 4
manage /etc/debian_chroot
.IP "\fBlb_chroot_devpts\fR(1)" 4
mount /dev/pts
.IP "\fBlb_chroot_dpkg\fR(1)" 4
manage /sbin/dpkg
.IP "\fBlb_chroot_hacks\fR(1)" 4
execute hacks in chroot
.IP "\fBlb_chroot_hostname\fR(1)" 4
manage /bin/hostname
.IP "\fBlb_chroot_hosts\fR(1)" 4
manage /etc/hosts
.IP "\fBlb_chroot_install\-packages\fR(1)" 4
install queued packages into chroot
.IP "\fBlb_chroot_interactive\fR(1)" 4
make build interactive
.IP "\fBlb_chroot_linux\-image\fR(1)" 4
manage /etc/kernel\-img.conf
.IP "\fBlb_chroot_hooks\fR(1)" 4
execute local hooks in chroot
.IP "\fBlb_chroot_local\-includes\fR(1)" 4
copy local files into chroot
.IP "\fBlb_chroot_packages\fR(1)" 4
queue install of packages into chroot
.IP "\fBlb_chroot_local\-patches\fR(1)" 4
apply local patches against chroot
.IP "\fBlb_chroot_local\-preseed\fR(1)" 4
use debconf local preseeding file
.IP "\fBlb_chroot_packagelists\fR(1)" 4
queue install of package lists into chroot
.IP "\fBlb_chroot_proc\fR(1)" 4
mount /proc
.IP "\fBlb_chroot_resolv\fR(1)" 4
manage /etc/resolv.conf
.IP "\fBlb_chroot_selinuxfs\fR(1)" 4
mount /selinux
.IP "\fBlb_chroot_archives\fR(1)" 4
manage /etc/apt/sources.list
.IP "\fBlb_chroot_sysfs\fR(1)" 4
mount /sys
.IP "\fBlb_chroot_sysv\-rc\fR(1)" 4
manage /usr/sbin/policy\-rc.d
.IP "\fBlb_chroot_task\-lists\fR(1)" 4
install task lists into chroot
.SS Binary commands
.IP "\fBlb_binary_chroot\fR(1)" 4
copy chroot into chroot
.IP "\fBlb_binary_debian\-installer\fR(1)" 4
install debian\-installer into binary
.IP "\fBlb_binary_disk\fR(1)" 4
install disk information into binary
.IP "\fBlb_binary_grub\fR(1)" 4
installs grub into binary
.IP "\fBlb_binary_grub2\fR(1)" 4
installs grub2 into binary
.IP "\fBlb_binary_includes\fR(1)" 4
copy files into binary
.IP "\fBlb_binary_iso\fR(1)" 4
build iso binary image
.IP "\fBlb_binary_linux\-image\fR(1)" 4
install linux\-image into binary
.IP "\fBlb_binary_local\-hooks\fR(1)" 4
execute local hooks in binary
.IP "\fBlb_binary_local\-includes\fR(1)" 4
copy files into binary
.IP "\fBlb_binary_local\-packagelists\fR(1)" 4
install local package lists into binary
.IP "\fBlb_binary_manifest\fR(1)" 4
create manifest
.IP "\fBlb_binary_checksums\fR(1)" 4
create binary checksums (md5, sha1, and/or sha256)
.IP "\fBlb_binary_memtest\fR(1)" 4
installs a memtest into binary
.IP "\fBlb_binary_net\fR(1)" 4
build netboot binary image
.IP "\fBlb_binary_rootfs\fR(1)" 4
build rootfs image
.IP "\fBlb_binary_syslinux\fR(1)" 4
installs syslinux into binary
.IP "\fBlb_binary_tar\fR(1)" 4
build harddisk binary image
.IP "\fBlb_binary_hdd\fR(1)" 4
build binary hdd image
.IP "\fBlb_binary_win32\-loader\fR(1)" 4
installs win32\-loader into binary
.SS Source commands
.IP "\fBlb_source_debian\fR(1)" 4
download sources
.IP "\fBlb_source_debian\-live\fR(1)" 4
copy debian\-live config into source
.IP "\fBlb_source_disk\fR(1)" 4
install disk information into source
.IP "\fBlb_source_iso\fR(1)" 4
build iso source image
.IP "\fBlb_source_checksums\fR(1)" 4
create source checksums (md5, sha1, and/or sha256)
.IP "\fBlb_source_net\fR(1)" 4
build source net image
.IP "\fBlb_source_tar\fR(1)" 4
build source tarball
.IP "\fBlb_source_hdd\fR(1)" 4
build source hdd image
.\" FIXME

.SH CONFIG FILES
.\" FIXME
Many live\-build commands make use of files in the \fIconfig/\fR directory to control what they do. Besides the common \fIconfig/common\fR, which is used by all live\-build commands, some additional files can be used to configure the behavior of specific live\-build commands. These files are typically named config/stage or config/stage_helper (where "stage" of course, is replaced with the name of the stage that they belong to, and "helper" with the name of the helper).
.PP
For example, lb_bootstrap_debootstrap uses files named config/bootstrap and config/bootstrap_debootstrap to read the options it will use. See the man pages of individual commands for details about the names and formats of the files they use. Generally, these files contain variables with values assigned, one variable per line. Some programs in live\-build use pairs of values or slightly more complicated variable assignments.
.PP
Note that live\-build will respect environment variables which are present in the context of the shell it is running. If variables can be read from config files, then they override environment variables, and if command line options are used, they override values from config files. If no value for a given variable can be found and thus is unset, live\-build will automatically set it to the default value.
.PP
In some rare cases, you may want to have different versions of these files for different architectures or distributions. If files named config/stage.arch or config/stage_helper.arch, and config/stage.dist or config/stage_helper.dist exist, where "arch" is the same as the output of "dpkg \-\-print\-architecture" and "dist" is the same as the codename of the target distribution, then they will be used in preference to other, more general files.
.PP
All config files are shell scripts which are sourced by a live\-build program. That means they have to follow the normal shell syntax. You can also put comments in these files; lines beginning with "#" are ignored.
.\" FIXME

.SH FILES
.IP "\fB/etc/live/build.conf\fR" 4
.IP "\fB/etc/live/build/*\fR" 4

.SH SEE ALSO
\fIlive\-boot\fR(7)
.PP
\fIlive\-config\fR(7)
.PP
This program is a part of live\-build.

.SH HOMEPAGE
More information about live\-build and the Live Systems project can be found on the homepage at <\fIhttp://live-systems.org/\fR> and in the manual at <\fIhttp://live-systems.org/manual/\fR>.

.SH BUGS
Bugs can be reported by submitting a bugreport for the live\-build package in the Bug Tracking System at <\fIhttp://bugs.debian.org/\fR> or by writing a mail to the Live Systems mailing list at <\fIdebian-live@lists.debian.org\fR>.

.SH AUTHOR
live\-build was written by Daniel Baumann <\fImail@daniel-baumann.ch\fR>.
