.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH LIVE\-BUILD 7 21.10.2015 5.0~a11\-1 "Projet Live Systems"

.SH NOM
\fBlive\-build\fP \- la suite d'outils live systems

.SH SYNOPSIS
.\" FIXME
.\" FIXME
\fBlb \fP\fICOMMAND\fP [\fB\-h|\-\-help\fP] [\fB\-u|\-\-usage\fP] [\fB\-v|\-\-version\fP]
[\fB\-\-breakpoints\fP] [\fB\-\-conffile\fP] [\fB\-\-debug\fP] [\fB\-\-force\fP] [\fB\-\-quiet\fP]
[\fB\-\-verbose\fP]

.SH DESCRIPTION
.\" FIXME
live\-build est un ensemble de scripts pour construire des images de système
live. L'idée derrière live\-build est une suite d'outils qui utilise un
répertoire de configuration pour automatiser complètement et personnaliser
tous les aspects de la construction d'une image Live.
.PP
La \fICOMMANDE\fP est un nom d'une commande live\-build (voir ci\-dessous).
.PP
.\" FIXME
Davantage de documentation à propos de la façon d'utiliser live\-build est
disponible dans les pages de manuel individuelles de chaque assistant ainsi
que dans le manual à <\fIhttp://live\-systems.org/manual/\fP>.

.SH OPTIONS
.\" FIXME
.SS "Options live\-build partagées"
Les options en ligne de commande suivantes sont supportées par l'ensemble
des programmes live\-build.
.IP "\fB\-h, \-\-help\fP" 4
affiche l'aide et quitte
.IP "\fB\-u, \-\-usage\fP" 4
affiche l'utilisation et quitte
.IP "\fB\-v, \-\-version\fP" 4
affiche les informations de version et quitte
.SS "Options live\-build communes"
Les options de lignes de commandes suivantes sont supportées par la plupart
des programmes live\-build. Voir la page de manuel de chaque programme pour
une explication complète de ce que chaque option fait.
.IP \fB\-\-breakpoints\fP 4
lance avec des points d'arrêt (breakpoints).
.IP \fB\-\-conffile\fP 4
utilise un fichier de configuration personnalisé.
.IP \fB\-\-debug\fP 4
affiche des informations de déboguage.
.IP \fB\-\-force\fP 4
force l'exécution d'un assistant, même si le fichier de stage existe.
.IP \fB\-\-quiet\fP 4
soit discret.
.IP \fB\-\-verbose\fP 4
.\" FIXME
soit verbeux.

.SH "COMMANDES LIVE\-BUILD"
.\" FIXME
Nous divisons live\-build entre des commandes de haut\-niveau ("porcelaine")
et de bas\-niveau ("plomberie").
.PP
.\" FIXME
Voici une liste complète de toutes les commandes live\-build
disponibles. Consultez leurs pages de manuel pour obtenir de la
documentation additionnelle.

.SH "COMMANDES HAUT\-NIVEAU (PORCELAINE)"
.\" FIXME
Nous séparons les commandes porcelaine en commandes principales et en
utilitaires utilisateur auxiliaires.
.SS "Commandes porcelaine principales"
.IP \fBlb_config\fP(1) 4
crée une configuration pour live\-build
.IP \fBlb_bootstrap\fP(1) 4
crée le premier stage en amorçant un système debian basique
.IP \fBlb_chroot\fP(1) 4
crée un deuxième stage en personnalisant le chroot
.IP \fBlb_binary\fP(1) 4
crée le troisième stage en générant une image binaire
.IP \fBlb_source\fP(1) 4
crée le quatrième stage optionel en générant une image source
.IP \fBlb_clean\fP(1) 4
nettoie les répertoires de construction du système
.SS "Commandes auxiliaires"
.IP \fBlb\fP(1) 4
emballage live\-build générique
.IP \fBlb_build\fP(1) 4
alias pour tous les stages
.IP \fBlb_local\fP(1) 4
assistant pour l'utilisation d'un live\-build local
.IP \fBlb_testroot\fP(1) 4
.\" FIXME
s'assure que le système est construit en tant qu'administrateur (root)

.SH "COMMANDES BAS\-NIVEAU (PLOMBERIE)"
.\" FIXME
Le travail réel de live\-build est implémenté dans les commandes bas\-niveau,
appelées plomberie. Elles ne sont pas supposées être utilisées par les
utilisateurs finaux, ils devraient rester avec les porcelaines puisqu'elles
s'assurent que toutes les différentes commandes de plomberie sont exécutées
dans le bon ordre. Toutefois, si vous prévoyez de ré\-utiliser les commandes
live\-build dans vos propres scripts, alors les plomberies pourraient vous
intéresser.
.PP
Notez que l'interface (ensemble des options et des semantiques) de ces
commandes bas\-niveau sont pensées pour être beaucoup plus stables que les
commandes de niveau Porcelaine. D'un autre côté, l'interface des commandes
Porcelaine sont sujettes à changement afin d'améliorer l'expérience de
l'utilisateur final.
.SS "Commandes d'amorçage"
.IP \fBlb_bootstrap_cache\fP(1) 4
stage d'amorçage cache
.IP \fBlb_bootstrap_debootstrap\fP(1) 4
amorçcer un système Debian avec debootstrap(8)
.SS "Commandes chroot"
.IP \fBlb_chroot_apt\fP(1) 4
gère /etc/apt/apt.conf
.IP \fBlb_chroot_cache\fP(1) 4
stage de chroot cache
.IP \fBlb_chroot_debianchroot\fP(1) 4
gère /etc/debian_chroot
.IP \fBlb_chroot_devpts\fP(1) 4
monte /dev/pts
.IP \fBlb_chroot_dpkg\fP(1) 4
gère /sbin/dpkg
.IP \fBlb_chroot_hacks\fP(1) 4
exécute les hacks dans le chroot
.IP \fBlb_chroot_hostname\fP(1) 4
gère /bin/hostname
.IP \fBlb_chroot_hosts\fP(1) 4
gère /etc/hosts
.IP \fBlb_chroot_install\-packages\fP(1) 4
installe les paquets en attente dans le chroot
.IP \fBlb_chroot_interactive\fP(1) 4
rend la construction intéractive
.IP \fBlb_chroot_linux\-image\fP(1) 4
gère /etc/kernel\-img.conf
.IP \fBlb_chroot_hooks\fP(1) 4
exécute les hooks locaux dans le chroot
.IP \fBlb_chroot_local\-includes\fP(1) 4
copie les fichiers locaux dans le chroot
.IP \fBlb_chroot_packages\fP(1) 4
met en attente l'installation des paquets dans le chroot
.IP \fBlb_chroot_local\-patches\fP(1) 4
appliques les rustines locales dans le chroot
.IP \fBlb_chroot_local\-preseed\fP(1) 4
utilise un fichier de pré\-configuration local debconf
.IP \fBlb_chroot_packagelists\fP(1) 4
met en attente l'installation des listes de paquets dans le chroot
.IP \fBlb_chroot_proc\fP(1) 4
monte /proc
.IP \fBlb_chroot_resolv\fP(1) 4
gère /etc/resolv.conf
.IP \fBlb_chroot_selinuxfs\fP(1) 4
monte /selinux
.IP \fBlb_chroot_archives\fP(1) 4
gère /etc/apt/sources.list
.IP \fBlb_chroot_sysfs\fP(1) 4
gère /sys
.IP \fBlb_chroot_sysv\-rc\fP(1) 4
gère /usr/sbin/policy\-rc.d
.IP \fBlb_chroot_task\-lists\fP(1) 4
installe les listes de tâches dans le chroot
.SS "Commandes binaires"
.IP \fBlb_binary_chroot\fP(1) 4
copie le chroot dans le chroot
.IP \fBlb_binary_debian\-installer\fP(1) 4
installe debian\-installer dans le binaire
.IP \fBlb_binary_disk\fP(1) 4
installe les informations de disque dans le binaire
.IP \fBlb_binary_grub\fP(1) 4
installe grub dans le binaire
.IP \fBlb_binary_grub2\fP(1) 4
installe grub2 dans le binaire
.IP \fBlb_binary_includes\fP(1) 4
copie les fichiers dans le binaire
.IP \fBlb_binary_iso\fP(1) 4
construit l'image binaire iso
.IP \fBlb_binary_linux\-image\fP(1) 4
installe linux\-image dans le binaire
.IP \fBlb_binary_local\-hooks\fP(1) 4
exécute les hooks locaux dans le binaire
.IP \fBlb_binary_local\-includes\fP(1) 4
copie les fichiers dans le binaire
.IP \fBlb_binary_local\-packagelists\fP(1) 4
installe les listes de paquets locaux dans le binaire
.IP \fBlb_binary_manifest\fP(1) 4
crée le manifeste
.IP \fBlb_binary_checksums\fP(1) 4
crée les sommes de vérification binaires (md5, sha1, et/ou sha256)
.IP \fBlb_binary_memtest\fP(1) 4
installe memtest dans le binaire
.IP \fBlb_binary_net\fP(1) 4
construit l'image binaire netboot
.IP \fBlb_binary_rootfs\fP(1) 4
construit l'image rootfs
.IP \fBlb_binary_syslinux\fP(1) 4
installe syslinux dans le binaire
.IP \fBlb_binary_tar\fP(1) 4
construit une image binaire pour disque dur
.IP \fBlb_binary_hdd\fP(1) 4
construit une image binaire hdd
.IP \fBlb_binary_win32\-loader\fP(1) 4
installe win32\-loader dans le binaire
.SS "Commandes source"
.IP \fBlb_source_debian\fP(1) 4
télécharge les sources
.IP \fBlb_source_debian\-live\fP(1) 4
copie la configuration debian\-live dans la source
.IP \fBlb_source_disk\fP(1) 4
installe les informations de disque dans la source
.IP \fBlb_source_iso\fP(1) 4
construit l'image source iso
.IP \fBlb_source_checksums\fP(1) 4
crée les sommes de vérification binaires (md5, sha1, et/ou sha256)
.IP \fBlb_source_net\fP(1) 4
construit l'image net source
.IP \fBlb_source_tar\fP(1) 4
construit le tarball source
.IP \fBlb_source_hdd\fP(1) 4
.\" FIXME
construit l'image hdd source

.SH "FICHIERS DE CONFIGURATION"
.\" FIXME
Plusieurs commandes live\-build utilisent des fichiers dans le répertoire
\fIconfig/\fP pour contrôler ce qu'elles font. En plus du \fIconfig/common\fP
commun, qui est utilisé par toutes les commandes live\-build, plusieurs
fichiers additionels peuvent être utilisés pour configurer le comportement
de commandes live\-build spécifiques. Ces fichiers sont typiquement nommés
config/stage ou config/stage_assistant (où "stage" est évidemment remplacé
par le nom du stage auquel il appartient, "assistant" par le nom de
l'assistant).
.PP
Par exemple, lb_bootstrap_debootstrap utilise des fichiers nommés
config/bootstrap et config/bootstrap_debootstrap pour lire les options qu'il
utilisera. Voir les pages des commandes individuelles de manuel pour des
détails à propos des noms et des formats de fichiers qu'ils
utilisent. Généralement, ces fichiers contiennent des variables avec des
valeurs assignées, une variable par ligne. Plusieurs programmes dans
live\-build utilisent des paires de valeur ou des assignations de variables
légèrement plus compliquées.
.PP
Notez que live\-build respectera les variables d'environment présentes dans
le contexte du shell lancé. Si les variables peuvent être lues depuis les
fichiers de configuration, alors elles prennent le pas sur les variables
d'environement, et si les options en ligne de commande sont utilisées, elles
sont prioritaires sur les fichiers de configuration. Si pour une variable
donnée, aucune valeur ne peut être trouvée et donc, est non\-paramétrèe,
live\-build la paramètrera automatiquement à la valeur par défaut.
.PP
Dans de rares cas, vous pourriez vouloir avoir différentes versions de ces
fichiers pour différentes architectures ou distributions. Si des fichiers
nommés config/stage.arch ou config/stage_assistant.arch, et
config/stage.dist ou config/stage_assistant.dist existent, où "arch" est
équivalent à la sortie de "dpkg \-\-print\-architecture" et "dist" équivalent
au nom de code de la distribution cible, alors ils seront utilisés en
priorité aux autres fichier plus généraux.
.PP
.\" FIXME
Tous les fichiers de configuration sont des scripts shell qui sont sourcés
par un programme live\-build. Ceci signifie qu'ils doivent suivre la syntaxe
de shell normale. Vous pouvez également mettre des commentaires dans ces
fichiers; les lignes commençant par des "#" sont ignorées.

.SH FICHIERS
.IP \fB/etc/live/build.conf\fP 4
.IP \fB/etc/live/build/*\fP 4

.SH "VOIR AUSSI"
\fIlive\-boot\fP(7)
.PP
\fIlive\-config\fP(7)
.PP
Ce programme est une partie de live\-build.

.SH "PAGE D'ACCUEIL"
Davantage d'informations à propos de live\-build et du projet Live Systems
peuvent être trouvées sur la page d'accueil à
<\fIhttp://live\-systems.org/\fP> et dans le manuel à
<\fIhttp://live\-systems.org/manual/\fP>.

.SH BOGUES
Les bogues peuvent être signalés en soumettant un rapport de bogue pour le
paquet live\-build dans le BTS à <\fIhttp://bugs.debian.org/\fP> ou par
l'écriture d'un courriel à la liste de diffusion Live Systems à
<\fIdebian\-live@lists.debian.org\fP>.

.SH AUTEUR
live\-images a été écrit par Daniel Baumann
<\fImail@daniel\-baumann.ch\fP>.
