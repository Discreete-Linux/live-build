#!/bin/sh

## live-build(7) - System Build Scripts
## Copyright (C) 2006-2015 Daniel Baumann <mail@daniel-baumann.ch>
##
## This program comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
## This is free software, and you are welcome to redistribute it
## under certain conditions; see COPYING for details.


set -e

# Including common functions
[ -e "${LIVE_BUILD}/scripts/build.sh" ] && . "${LIVE_BUILD}/scripts/build.sh" || . /usr/lib/live/build.sh

# Setting static variables
DESCRIPTION="$(Echo 'bootstrap a Debian system with debootstrap(8)')"
HELP=""
USAGE="${PROGRAM} [--force]"

Arguments "${@}"

# Reading configuration files
Read_conffiles config/all config/common config/bootstrap config/chroot config/binary config/source
Set_defaults

if [ ! -x "$(which debootstrap 2>/dev/null)" ]
then
	echo "E: debootstrap - command not found"
	echo "I: debootstrap can be obtained from http://ftp.debian.org/debian/pool/main/d/debootstrap/"
	echo "I: On Debian based systems, debootstrap can be installed with 'apt-get install debootstrap'."
	exit 1
fi

# Check architecture
Check_crossarchitectures

Echo_message "Begin bootstrapping system..."

Check_package chroot bin/debootstrap debootstrap

# Checking stage file
Check_stagefile .build/bootstrap
Check_stagefile .build/bootstrap_cache.restore

# Checking lock file
Check_lockfile .lock

# Creating lock file
Create_lockfile .lock

# Creating chroot directory
mkdir -p chroot

# Setting debootstrap options
if [ -n "${LB_ARCHITECTURES}" ]
then
	DEBOOTSTRAP_OPTIONS="${DEBOOTSTRAP_OPTIONS} --arch=${LB_ARCHITECTURES}"
fi

if [ "${LB_ARCHIVE_AREAS}" != "main" ]
then
	# Modify archive areas to remove leading/trailing whitespaces and replace other whitepspace with commas
	DEBOOTSTRAP_OPTIONS="${DEBOOTSTRAP_OPTIONS} --components=$(echo ${LB_ARCHIVE_AREAS} | sed -e 's| |,|g')"
fi

if [ "${_VERBOSE}" = "true" ]
then
	DEBOOTSTRAP_OPTIONS="${DEBOOTSTRAP_OPTIONS} --verbose"
fi

# If LB_APT_SECURE is false, do not check signatures of the Release file
# (requires debootstrap >= 1.0.30)
if [ "${LB_APT_SECURE}" = "false" ] && /usr/sbin/debootstrap --help  | grep -qs '\-\-no-check-gpg'
then
	DEBOOTSTRAP_OPTIONS="${DEBOOTSTRAP_OPTIONS} --no-check-gpg"
fi

if [ -x "/usr/sbin/debootstrap" ]
then
	if [ "${LB_CACHE_PACKAGES}" = "true" ]
	then
		if ls cache/packages.bootstrap/*.deb > /dev/null 2>&1
		then
			mkdir -p chroot/var/cache/apt/archives
			cp cache/packages.bootstrap/*.deb chroot/var/cache/apt/archives
		fi

		Echo_breakage "Running debootstrap (download-only)... "
		debootstrap ${DEBOOTSTRAP_OPTIONS} --download-only "${LB_PARENT_DISTRIBUTION}" chroot "${LB_PARENT_MIRROR_BOOTSTRAP}"

		# Removing old cache
		rm -f cache/packages.bootstrap/*.deb

		# Saving new cache
		mkdir -p cache/packages.bootstrap
		cp chroot/var/cache/apt/archives/*.deb cache/packages.bootstrap
	fi

	Echo_breakage "Running debootstrap... "

	# Run appropriate bootstrap, i.e. foreign or regular bootstrap
	if [ "${LB_BOOTSTRAP_QEMU_ARCHITECTURES}" = "${LB_ARCHITECTURES}" ]; then

		if [ -n "${LB_BOOTSTRAP_QEMU_EXCLUDE}" ]
		then
			DEBOOTSTRAP_OPTIONS="${DEBOOTSTRAP_OPTIONS} --exclude=$(echo ${LB_BOOTSTRAP_QEMU_EXCLUDE} | sed 's|  *|,|g')"
		fi

		Echo_message "Bootstrap will be foreign"
		debootstrap ${DEBOOTSTRAP_OPTIONS} --foreign "${LB_PARENT_DISTRIBUTION}" chroot "${LB_PARENT_MIRROR_BOOTSTRAP}"

		Echo_message "Running debootstrap second stage under QEMU"
		cp ${LB_BOOTSTRAP_QEMU_STATIC} chroot/usr/bin
		Chroot chroot /bin/sh /debootstrap/debootstrap --second-stage
	else
		debootstrap ${DEBOOTSTRAP_OPTIONS} "${LB_PARENT_DISTRIBUTION}" chroot "${LB_PARENT_MIRROR_BOOTSTRAP}"
	fi

	# Deconfiguring debootstrap configurations
	rm -f chroot/etc/hosts

	# Removing bootstrap cache
	rm -f chroot/var/cache/apt/archives/*.deb

	# Creating stage file
	Create_stagefile .build/bootstrap
else
	Echo_error "Can't process file /usr/bin/debootstrap (FIXME)"
	exit 1
fi
